---
title: "Final Project"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
    geometry:
      - top=20mm
      - bottom=15mm
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

# Group member
Luis Señires(ldsenires, section1), Hiroaki Kurachi(hirokurachi, section2)

<!-- The primary purpose of this writeup is to inform us of what we are reading before we look at your code. -->

# Background

- Green, Social, and Sustainability Bonds
  Financial securities issued by organizations to raise funding for a portfolio of projects that are expected to generate “green” or “social” (or both!) benefits.

- Environmental Performance Index (EPI)
  Index provided by Yale and Columbia, ranking 180 countries on climate change performance, environmental health, and ecosystem vitality

# Research question

<!--Describe your research question-->

- What is the relationship between the amount of debt funding raised through Green and Sustainability (GS) bonds and a country’s EPI score?

# Approach
<!--Then discuss the approach you took and the coding involved, including discussing any weaknesses or difficulties encountered -->


- Dataset 1: GS Bond issuances (taken from ADB AsianBondsOnline portal)

    - Contains GS bond and total local currency bond issuance volumes (USD millions)

    - Limited to ASEAN+3 economies (dropped China as outlier)

- Dataset 2: EPI (taken from Yale EPI website)

    - Contains aggregated EPI score (two-year time horizon)

```{python} 
#| echo: False 
#| output: False
# Import required packages.
import os
import altair as alt
import pandas as pd
import numpy as np
#import re
alt.renderers.enable("png")
alt.data_transformers.disable_max_rows() 
```

<!--Data wrangling -->

<!--1 Create df_epi -->

```{python} 
#| include: False
# Load 2024 epi dataset
path_cwd = (r"C:\Users\hkura\Documents\Uchicago\04 2024 Autumn\Python2\final")
# path_cwd = (r"C:\Users\LUIS\Documents\GitHub\final")

path_epi_raw = os.path.join(
    path_cwd, r"data\index"
)
path_epi_2024 = os.path.join(
    path_epi_raw, "epi2024results.csv"
)
df_epi = pd.read_csv(path_epi_2024)

# Extract column including epi values
df_epi = df_epi[["iso", "country", "EPI.new"]].rename(
    {"EPI.new": 2024}, axis=1
)
```

```{python} 
#| include: False
path_data = os.path.join(
    path_cwd, "data"
)
```

```{python} 
#| include: False
# Add each year's result to the dataset from CSVs
for year in range(2016, 2024, 2):
    path_epi_add = os.path.join(
        path_epi_raw, f"{year}-epi.xlsx"
    )
    sheet = {
        2016: 2, 2018: 3, 2020: 4, 2022: 4
    }
    df_epi_add = pd.read_excel(path_epi_add, sheet_name=sheet[year])
    if year == 2016:
        df_epi_add = df_epi_add.rename(
            {"Country": "country", "ISO3": "iso", "2016 EPI Score": "EPI.new"},
            axis=1
        )
    elif year == 2018:
        df_epi_add = df_epi_add.rename(
            {"EPI.current": "EPI.new"},
            axis=1
        )
    df_epi_add = df_epi_add[["country", "iso", "EPI.new"]].rename(
        {"EPI.new": year},
        axis=1
    )
    df_epi = df_epi.merge(
        df_epi_add,
        on=["iso", "country"],
        how="inner"
    )

# Change the columns order
df_epi = df_epi[["country", "iso", 2016, 2018, 2020, 2022, 2024]]

# Melt the dataset by year
df_epi = df_epi.melt(
    id_vars=["country", "iso"],
    var_name="Year",
    value_name="EPI"
).sort_values(["iso", "Year"], ascending=True).reset_index(drop=True).rename({"country": "Country Name"}, axis=1)
```

```{python} 
# | include: False
# Create World/ASEAN+3 average row


def calc_annual_average_epi(df, outcome):
    """Calculate annual average EPI for the outcome"""
    average = df.groupby("Year").agg(
        EPI=("EPI", "mean")
    ).reset_index()
    average[["Country Name", "iso"]] = outcome
    average = average[["Country Name", "iso"]].join(
        average.drop(["Country Name", "iso"], axis=1))
    return average


# Create World average for each year
df_epi_world_average = calc_annual_average_epi(df_epi, "Average (World)")

# Filter df_epi by Country Name
df_epi = df_epi[df_epi["Country Name"].isin(
    ["Indonesia", "Japan", "Cambodia", "South Korea", "Laos",
        "Malaysia", "Philippines", "Singapore", "Thailand", "Viet Nam", "Average (World)"]
)].reset_index(drop=True)  # Drop China (outlier)

# Create ASEAN+3 average for each year and add as tail rows
df_epi_asean3_average = calc_annual_average_epi(df_epi, "Average (ASEAN+3)")
df_epi = pd.concat([df_epi, df_epi_world_average, df_epi_asean3_average])
```

```{python} 
#| include: False
# Create new column of "EPI gap from World average"
df_epi_average = pd.concat([df_epi_world_average, df_epi_asean3_average])


def call_average_epi(year, country):
    """Return average EPI for corresponding year"""
    average = df_epi_average[(df_epi_average["Year"] == year) & (
        df_epi_average["Country Name"] == country)].iloc[0]["EPI"]
    return average


df_epi["EPI World average"] = [call_average_epi(
    x, "Average (World)") for x in df_epi["Year"]]
df_epi["EPI gap from World average"] = df_epi["EPI"] - \
    df_epi["EPI World average"]

# Create new column of "EPI gap from ASEAN+3 average"
df_epi["EPI ASEAN+3 average"] = [call_average_epi(x, "Average (ASEAN+3)")
                                   for x in df_epi["Year"]]
df_epi["EPI gap from ASEAN+3 average"] = df_epi["EPI"] - \
    df_epi["EPI ASEAN+3 average"]

# Save the dataset as csv file
path_epi = os.path.join(
    path_data, "epi.csv"
)

df_epi.to_csv(path_epi)
```

<!--2 Create df_bonds_long -->

```{python} 
#| include: False
# Load local currency issuance dataset
path_lcy_issuance = os.path.join(
    path_data, "breakdown of lcy bond market issuance.csv"
)
df_lcy_issuance = pd.read_csv(
    path_lcy_issuance, skiprows=10)

# Drop columns not in USD terms
df_lcy_issuance = df_lcy_issuance.drop(df_lcy_issuance.columns[2:5], axis=1)

# Convert column values to USD millions
df_lcy_issuance.iloc[:, 2:5] = df_lcy_issuance.iloc[:, 2:5] * 1000

# Rename columns
df_lcy_issuance = df_lcy_issuance.rename(columns={
    "Corporate(USD billions)": "corp_lcy",
    "Government(USD billions)": "govt_lcy",
    "Total(USD billions)": "total_lcy",
})
```

```{python} 
#| include: False
# Load bond issuance datasets
path_green_issuance = os.path.join(
    path_data, "green bonds issuance.csv"
)
df_green_issuance = pd.read_csv(path_green_issuance, skiprows=10)

path_sustainability_issuance = os.path.join(
    path_data, "sustainability bonds issuance.csv"
)
df_sustainability_issuance = pd.read_csv(
    path_sustainability_issuance, skiprows=10)

# Merge green and sustainability datasets
df_bonds = df_green_issuance.merge(
    df_sustainability_issuance, on=["Economy", "Date"])

# Rename columns
df_bonds = df_bonds.rename(columns={
    "Government FCY(USD millions)_x": "govt_fcy_green",
    "Corporate FCY(USD millions)_x": "corp_fcy_green",
    "Government LCY(USD millions)_x": "govt_lcy_green",
    "Corporate LCY(USD millions)_x": "corp_lcy_green",
    "Total(USD millions)_x": "total_green",
    "Government FCY(USD millions)_y": "govt_fcy_sustainability",
    "Corporate FCY(USD millions)_y": "corp_fcy_sustainability",
    "Government LCY(USD millions)_y": "govt_lcy_sustainability",
    "Corporate LCY(USD millions)_y": "corp_lcy_sustainability",
    "Total(USD millions)_y": "total_sustainability",
})

# Add columns based on issuer type + bond label
df_bonds["govt_green"] = df_bonds["govt_fcy_green"] + \
    df_bonds["govt_lcy_green"]
df_bonds["corp_green"] = df_bonds["corp_fcy_green"] + \
    df_bonds["corp_lcy_green"]
df_bonds["govt_sustainability"] = df_bonds["govt_fcy_sustainability"] + \
    df_bonds["govt_lcy_sustainability"]
df_bonds["corp_sustainability"] = df_bonds["corp_fcy_sustainability"] + \
    df_bonds["corp_lcy_sustainability"]

# Handle date column
df_bonds = df_bonds.replace("Sep-2024", "2024").infer_objects(copy=False)
df_bonds["Date"] = df_bonds["Date"].astype(int)

# Merge lcy to bonds df
df_bonds = df_bonds.merge(df_lcy_issuance, on=["Economy", "Date"], how="outer")

# Drop China (outlier), Hong Kong (not included in original df_epi), and VN*(duplicate)
df_bonds = df_bonds[~df_bonds["Economy"].isin(["CN", "HK", "VN*"])]

# Retain only 2016-2024 data
df_bonds = df_bonds.loc[df_bonds["Date"] > 2015]
```

```{python} 
#| include: False
# Melt df for easier handling
df_bonds_long = df_bonds.melt(
    id_vars=["Economy", "Date"],
    value_vars=['govt_fcy_green', 'corp_fcy_green', 'govt_lcy_green',
                'corp_lcy_green', 'govt_fcy_sustainability',
                'corp_fcy_sustainability', 'govt_lcy_sustainability',
                'corp_lcy_sustainability', 'corp_lcy',
                'govt_lcy'],
    var_name="variable",
    value_name="amount"
)

# Define function to determine issuer type
def get_issuer_type(value):
    if "govt" in value:
        return "Government"
    elif "corp" in value:
        return "Corporate"
    else:
        return np.nan

# Define function to determine currency
def get_currency(value):
    if "lcy" in value:
        return "lcy"
    elif "fcy" in value:
        return "fcy"
    else:
        return np.nan

# Define function to determine bond label
def get_bond_label(value):
    if "green" in value:
        return "Green"
    elif "sustainability" in value:
        return "Sustainability"
    else:
        return np.nan

# Apply functions
df_bonds_long["issuer_type"] = df_bonds_long["variable"].apply(get_issuer_type)
df_bonds_long["currency"] = df_bonds_long["variable"].apply(get_currency)
df_bonds_long["bond_label"] = df_bonds_long["variable"].apply(get_bond_label)

# Rename column
df_bonds_long = df_bonds_long.rename(columns={"Date": "Year"})
```

<!--3 Create closswalk -->

```{python} 
#| include: False
# Identify corresponding country name and iso in df_epi
countries_epi = df_epi[~df_epi["Country Name"].isin(["Average (World)", "Average (ASEAN+3)"])][["Country Name", "iso"]].value_counts().reset_index(
).sort_values(
    by="iso", 
    ascending=True
).drop("count", axis=1).reset_index(drop=True)

# Identify corresponding iso("Economy" column) in df_bonds
countries_bonds = df_bonds_long["Economy"].value_counts().reset_index(
).sort_values(
    by="Economy", 
    ascending=True
).drop("count", axis=1).reset_index(drop=True)

# Create crosswalk from country lists
crosswalk = pd.concat([countries_bonds, countries_epi], axis=1)
```

<!--4 Merge DFs to make base DF-->

```{python} 
#| echo: False
# Merge crosswalk to df_bonds_long

df_bonds_long = df_bonds_long.merge(
    crosswalk,
    on="Economy",
    how="left"
)
```

```{python} 
#| include: False
# Merge DFs by Country Code and Date/Year
df_base = df_bonds_long.merge(
    df_epi,
    on=["iso", "Year", "Country Name"],
    how="left"
)
df_base = df_base.drop(["Economy"], axis=1)

df_base = df_base[["Country Name", "iso"]].join(
    df_base.drop(["Country Name", "iso"], axis=1)
).rename({"Country Name": "Country Name", "iso": "Country Code"}, axis=1)

# Save the dataset as csv file
path_base = os.path.join(
    path_data, "base.csv"
)

df_base.to_csv(path_base)
```


# Findings
<!-- Display static plots, briefly discribe then and our Shiny App -->

1. Nominal borrowing amounts for GS bonds follow an upward trend. Dashboard shows that this trend is common to all countries within the region. While JP, SK contributes to forming the trend with large and increasing volume, other countries such as SG, ID, PH and KH generally increases the issuance based on their own size of volume. But as the borrowing mix shows, notably the rate of these GS bonds are quite small as a percentage of overall borrowing volume.
    - Possible reasons: 1)To fund projects that will help countries meet their nationally determined contributions under the Paris Agreement. 2)To explore alternative indigenous energy sources in response to a looming energy crisis exacerbated by geopolitical conflicts. 3)To take advantage of the growth of capital markets dedicated to Environment, Social, and Governance (ESG). 4)More generally, to meet higher deficit requirements initially caused by the COVID-19 pandemic. 

<!--Plots on Bond issuance -->

```{python} 
#| include: False
# Set path to save pictures
path_picture = os.path.join(
    path_cwd, "pictures"
)
```

<!--1 Bond issuance over time-->

```{python} 
#| echo: False
#| output: False

# Drop bonds with no label
df_base_drop_lcy = df_base.dropna(subset="bond_label")

# Plot issuances per year
chart_bonds = alt.Chart(df_base_drop_lcy).mark_bar().encode(
    alt.X("Year:O", axis=alt.Axis(labelAngle=45)),
    alt.Y("amount:Q", title="Amount (in USD millions)"),
    alt.Color("Country Name:N")
).properties(
    width=500,
    height=500
)

chart_bonds.show()

# Save the plot as png
path_picture_bonds = os.path.join(
    path_picture, "chart_bonds.png"
)
chart_bonds.save(path_picture_bonds)
```

<!--2 Borrowing mix-->

```{python} 
#| echo: False
#| output: False
# Drop 2024 data and label lcy issuance as "unlabeled bonds"

df_base_drop_2024 = df_base.loc[df_base["Year"] != 2024]
df_base_drop_2024["bond_label"] = df_base_drop_2024[
    "bond_label"].fillna("Unlabeled bonds")

# Plot borrowing mix, for instance of Korea
chart_borrowing_mix_kor = alt.Chart(df_base_drop_2024).transform_filter(
    alt.FieldEqualPredicate(field="Country Code", equal="KOR")
).mark_bar().encode(
    alt.X("amount:Q", stack="normalize", axis=alt.Axis(labelAngle=45)),
    alt.Y("Year:O"),
    alt.Color(
        "bond_label:N",
        legend=alt.Legend(orient="bottom", titleOrient="left")
    ),
    alt.Order("bond_label", sort="descending")
).properties(
    width=500,
    height=500
)

chart_borrowing_mix_kor.show()

# Save the plot as png
path_picture_mix = os.path.join(
    path_picture, "chart_mix.png"
)
chart_borrowing_mix_kor.save(path_picture_mix)
```

::: {#fig-elephants layout-ncol=2}

![Consolidated issuance volume](pictures/chart_bonds.png){width=200}

![Share of GS bonds in total bonds](pictures/chart_mix.png){width=200}

Bonds issuance volume and share, 2016-2024YTD
:::

2. There is a regional (and global) drop in EPI scores, followed by a slight recovery in 2024. Even in the relative performance of each countries to a global benchmark using EPI gap from world average (dashboard), the scores of ASEAN+3 countries other than JP, SK and SG are lower than the average, and the whole ASEAN+3 trend is still on downtrend.
    - Possible reasons: 1)Shift in scoring criteria that require higher standards for performance. 2)More developments focused on economic growth rather than environmental targets.


<!--Plot EPI-->

<!--1 Nominal EPI-->

```{python} 
#| echo: False
#| output: False

# Plot EPI over year, which includes averages contained in df_epi rows
chart_epi = alt.Chart(df_epi).mark_line().encode(
    alt.X("Year:O", axis=alt.Axis(labelAngle=45)),
    alt.Y("EPI:Q", scale=alt.Scale(zero=False)),
    alt.Color("Country Name:N", legend=None)
).properties(
    width=500,
    height=500
).transform_filter(
    "(datum.Year==2016)|(datum.Year==2018)|(datum.Year==2020)|(datum.Year==2022)|(datum.Year==2024)"
)

chart_epi_text = alt.Chart(df_epi).transform_filter(
    "datum.Year == 2024"
).mark_text(
    align="left", baseline="middle", dx=7
).encode(
    text="Country Name:N",
    x="Year:O",
    y="EPI:Q",
    color="Country Name:N"
)

chart_epi = chart_epi + chart_epi_text

chart_epi.show()

# Save the plot as png
path_picture_epi = os.path.join(
    path_picture, "chart_epi.png"
)
chart_epi.save(path_picture_epi)
```

<!--2 Gap from world average-->

```{python} 
#| echo: False
#| output: False

# Plot each country's gap from World average over year
chart_epi_gap = alt.Chart(df_base).mark_line().encode(
    alt.X("Year:O", axis=alt.Axis(labelAngle=45)),
    alt.Y("EPI gap from World average:Q"),
    alt.Color("Country Name:N", legend=None)
).properties(
    width=500,
    height=500
).transform_filter(
    "(datum.Year==2016)|(datum.Year==2018)|(datum.Year==2020)|(datum.Year==2022)|(datum.Year==2024)"
)

chart_epi_gap_text = alt.Chart(df_base).transform_filter(
    "datum.Year == 2024"
).mark_text(
    align="left", baseline="middle", dx=7
).encode(
    text="Country Name:N",
    x="Year:O",
    y="EPI gap from World average:Q",
    color="Country Name:N"
)

chart_epi_gap = chart_epi_gap + chart_epi_gap_text

chart_epi_gap.show()

# Save the plot as png
path_picture_epi_gap = os.path.join(
    path_picture, "chart_epi_gap.png"
)
chart_epi_gap.save(path_picture_epi_gap)
```

![EPI scores, 2016-2024](pictures/chart_epi.png){width=200}

3. In the South Korea example, we can see that EPI scores remain stagnant despite a rise in GS bond issuance volume (we can select each country and make the trend comparison on dashboard). We tried linear regression on time series data to draw trend lines, with normalizing data for more meaningful comparison (Bonds are expressed in USD millions, EPI scores are 0 to 100).

<!-- plot for association btw/n Bonds and EPI -->

```{python} 
#| echo: False
#| output: False

# Normalize bonds issuance amount (w/o lcy issuance) and EPI gap from world average
df_base_normalized = df_base_drop_lcy.copy()

df_base_normalized["amount_norm"] = (df_base_normalized["amount"] - df_base_normalized["amount"].min()) / (
    df_base_normalized["amount"].max() - df_base_normalized["amount"].min())

df_base_normalized["EPI_gap_norm"] = (df_base_normalized["EPI gap from World average"] - df_base_normalized["EPI gap from World average"].min()) / (
    df_base_normalized["EPI gap from World average"].max() - df_base_normalized["EPI gap from World average"].min())

# Melt df by variable bonds issuance and EPI gap, so that plot can distinguish colors
df_base_normalized = df_base_normalized.melt(
    id_vars=["Country Name", "Year"],
    value_vars=["amount_norm", "EPI_gap_norm"],
    var_name="Variables",
    value_name="Bonds / EPI Changes (normalized)"
).dropna()

# Aggregate bond issuances amount per country and year (from separated values for each label)
normalized_amount = df_base_normalized[df_base_normalized["Variables"]
                                       == "amount_norm"]
normalized_amount = normalized_amount.groupby(["Country Name", "Year", "Variables"]).agg(
    result=("Bonds / EPI Changes (normalized)", "sum")
).reset_index().rename({"result": "Bonds / EPI Changes (normalized)"}, axis=1)

# Reconcaterate both data for bonds issuance and EPI gap
normalized_epi = df_base_normalized[df_base_normalized["Variables"]
                                    == "EPI_gap_norm"]
df_base_normalized = pd.concat([normalized_epi, normalized_amount])

# Plot issuances per year
chart_variables = alt.Chart(df_base_normalized).mark_point().transform_filter(
    alt.FieldEqualPredicate(field="Country Name", equal="South Korea")
).encode(
    alt.X("Year:O", axis=alt.Axis(labelAngle=45)),
    alt.Y("Bonds / EPI Changes (normalized):Q"),
    alt.Color("Variables:N")
).properties(
    width=500,
    height=500
)

trend_line = alt.Chart(df_base_normalized).mark_line().transform_filter(
    alt.FieldEqualPredicate(field="Country Name", equal="South Korea")
).transform_regression(
    "Year",
    "Bonds / EPI Changes (normalized)",
    groupby=["Variables"],
    method="linear"
).encode(
    alt.X("Year:O", axis=alt.Axis(labelAngle=45)),
    alt.Y("Bonds / EPI Changes (normalized):Q"),
    alt.Color("Variables:N")
)

chart_with_trend = chart_variables + trend_line
chart_with_trend.show()

# Save the plot as png
path_picture_trend = os.path.join(
    path_picture, "chart_with_trend.png"
)
chart_with_trend.save(path_picture_trend)
```

![Linear Regression on time series data - South Korea (Consolidated issuance volume, EPI score, 2016-2024)](pictures/chart_with_trend.png){width=200}

# Summary and areas for further research

<!-- Finish with a discussion of directions for future work -->

- Summary: Lower scores are observed despite higher GS issuance volumes.It is possible that EPI scores would have decreased even more if not for these investments. This could be a signal of “greenwashing" which refers to bond issuers using the GS label to oversell their environmental commitments to raise funding.

- Areas for further research: 1)Use of project-level data or more specific categorization of use of proceeds to derive a more accurate relationship between funds raised and specific projects funded. 2)Explore other potential determinants of EPI scores (e.g. GDP, specific investments into renewable energy, etc.) to help explain observed EPI trends. 3)Make relevant peer comparisons between economies based on other factors aside from region (e.g. emerging economies).

